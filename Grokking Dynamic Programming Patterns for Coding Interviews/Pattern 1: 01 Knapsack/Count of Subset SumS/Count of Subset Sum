
class Solution:
  def countSubsets(self, num, sum1):
    # Top-down Solution
    # Time: O(N*sum1)
    # Space: O(N*sum1) to store all stages and states and returns, can be optimized to O(sum1)
    dp = {}

    def dfs(idx, curr_sum):
      # Matching base case:
      if curr_sum == sum1:
        return 1

      # Base case: oob or exceeding the sum
      if idx >= len(num) or curr_sum > sum1:
        return 0
      
      # Base case: existence of current state
      if (idx, curr_sum) in dp:
        return dp[(idx, curr_sum)]
      
      # Case where only can not selected
      if num[idx] > sum1 - curr_sum:
        dp[(idx, curr_sum)] = dfs(idx+1, curr_sum)
      else:
        dp[(idx, curr_sum)] = dfs(idx+1, curr_sum) + dfs(idx+1, curr_sum + num[idx])
      
      return dp[(idx, curr_sum)]
    
    return dfs(0, 0)


    # Bottom up Solution
    # Time: O(N*sum1)
    # Space: O(sum1) Storing for the solution at each sum state
    last_row = [0 for curr_sum in range(sum1)] + [1]

    # Loop from bottom right o top left
    for idx in range(len(num)-1, -1, -1):
      new_row = [0 for curr_sum in range(sum1)] + [1]
      for curr_sum in range(sum1-1, -1, -1):
        # Return if the current weight cannot be selected
        if num[idx] > sum1 - curr_sum:
          new_row[curr_sum] = last_row[curr_sum]
        else:
          new_row[curr_sum] = last_row[curr_sum] + last_row[curr_sum+num[idx]]
      
      last_row = new_row
    
    # Return startng from 0 sum.
    return last_row[0]
